 # Training configuration
seed: 42
steps: 600_000
batch_size: 64
num_workers: 20
log_freq: 100
save_freq: 10_000
save_checkpoint: true
resume: false
output_dir: "outputs/train_diffusion_bridge"
job_name: "train_diffusion_bridge"

# Dataset configuration
dataset:
  repo_id: "jesbu1/bridge_v2_lerobot_pathmask"
  drop_keys:  # drop unnecessary features. Necessary so that we don't accidentally condition on too many things.
    #["observation.images.image_1", "observation.images.image_2", "observation.images.image_3", "observation.path.image_0", "observation.path.image_1", "observation.path.image_2", "observation.path.image_3", "observation.masked_path.image_0", "observation.masked_path.image_1", "observation.masked_path.image_2", "observation.masked_path.image_3"]
    ["observation.path.image_0", "observation.masked_path.image_0"]
  #random_cam_sampling:
  #  how_many_cameras: 2
  #  sample_cameras: true
  #  camera_present_key: "camera_present"
  image_transforms:
    enable: true
      enable: true
    tfs:
      crop_resize_rotate:
        weight: 1.0
        type: "CropResizeRotate"
        kwargs: { image_size: 212, crop_ratio: 0.95, rotation_range: 5 } # 224 * 0.95 rounded down

# Policy configuration
policy:
  type: "diffusion"
  device: "cuda"
  use_amp: true
  input_features:
    state:
      type: "STATE"
      shape: [8]  
    image:
      type: "VISUAL"
      shape: [3, 224, 224]
  output_features:
    action:
      type: "ACTION"
      shape: [7]
  horizon: 16
  n_action_steps: 8
  n_obs_steps: 1
  #pretrained_backbone_weights: "IMAGENET1K_V1"
  use_separate_rgb_encoder_per_camera: true
  crop_shape: null
  use_language: true 
  use_group_norm: true # for pre-trained models can't swap
  num_inference_steps: 10


# Optimizer configuration
optimizer:
  type: "adamw"
  lr: 0.003
  weight_decay: 0.01
  grad_clip_norm: 1.0

# Evaluation configuration
eval_freq: 0
eval:
  n_episodes: 10
  batch_size: 1
  use_async_envs: false

# Wandb configuration
wandb:
  enable: true
  project: "p-masked-vla"
  run_id: "train_diffusion_bridge"
